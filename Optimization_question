/*READ ME:
	*RT still has the hierarchy established by rank
*/


drop table if exists test;
create temporary table test as 
with sum_table as (
select 
	  s.eventid
  	, e.venueid
  	, c.catname
  	, c.catid
  	, s.month
    , s.t_sales
  	, row_number() over(order by s.month, c.catid, e.venueid, s.t_sales desc) as row_id
  	, sum(sum(t_sales)) over (partition by month) as sum_group_month
    , sum(sum(t_sales)) over(partition by month, c.catid) as sum_group_categories
    , sum(sum(t_sales)) over(partition by month, c.catid, e.venueid) as sum_group_venue
    
  	, sum(sum(t_sales)) over(partition by month, e.venueid) as sum_group_venue_new
  	, sum(sum(t_sales)) over(partition by month, e.eventid) as sum_group_event_new
from (select 
      	  eventid
      	, date_part(month, saletime) as month
      	, sum(pricepaid) * sum(qtysold) as t_sales 
      from sales 
      group by eventid, date_part(month, saletime)) s
join event e
	on s.eventid = e.eventid
join category c
  	on e.catid = c.catid
group by s.eventid
  	, e.venueid
  	, c.catname
  	, c.catid
  	, s.month
    , s.t_sales
),

rank_table as (
select
	  *
    , dense_rank() over(partition by month order by sum_group_categories desc) as rank_categories --1 = in that month; that category was number 1 
    , dense_rank() over(partition by month, catid order by sum_group_venue desc) as rank_venue -- 1 = in that month and category; that venue is #1
    , dense_rank() over(partition by month, catid, venueid order by t_sales desc) as rank_event -- 1 = in that month, category, and venue; the event is #1
  	, row_number() over(order by month, sum_group_categories desc) as row_id_cat
  	, row_number() over(order by month, sum_group_venue desc) as row_id_venue
  
  	, dense_rank() over(partition by month order by sum_group_venue_new desc) as rank_venue 
    , dense_rank() over(partition by month order by sum_group_event_new desc) as rank_event --ADD IN COALESC(LAG) AND SUM CASE WHEN TO FINISH THIS!
from sum_table
order by row_id
),

Lag_table as (
select
	  *
   	, coalesce(lag(sum_group_month) over(order by row_id), 0) as lag_month --lag using rowid so in order of month
  	, coalesce(lag(sum_group_categories) over(order by row_id_cat), 0) as lag_cat
  	, coalesce(lag(sum_group_venue) over(order by row_id_venue), 0) as lag_venue
from rank_table
group by eventid, venueid, catname, catid, month, t_sales, row_id, sum_group_month, sum_group_categories, sum_group_venue 
    , rank_categories , rank_venue , rank_event , row_id_cat, row_id_venue
),


RT_table as (
select
	  *
    , sum(case when lag_month != sum_group_month then sum_group_month else 0 end) 
    		over(order by row_id rows between unbounded preceding and current row) as RT_month -- same RT # if same month, ordered by month
    , sum(case when lag_cat != sum_group_categories then sum_group_categories else 0 end)
    		over(partition by month order by row_id_cat rows between unbounded preceding and current row) as RT_categories
    , sum(case when lag_venue != sum_group_venue then sum_group_venue else 0 end)
    		over(partition by month order by row_id_venue rows between unbounded preceding and current row) as RT_venue
    , sum(t_sales) over(partition by month, catname, venueid order by t_sales desc rows between unbounded preceding and current row) as RT_event
  	, case
  		when rank_categories = 1 or sum_group_categories = lag_cat then 0
  		else first_value((lag_cat - sum_group_categories) / sum_group_categories * 100) over(partition by month, catid)
  		end as per_diff_categories
from Lag_table
group by eventid, venueid, catname, catid, month, t_sales, row_id, sum_group_month, sum_group_categories, sum_group_venue 
    , rank_categories , rank_venue , rank_event, lag_month , row_id_cat, row_id_venue, lag_cat, lag_venue
)

select 
	  eventid
  	, venueid
  	, catname
  	, catid
  	, month
    , t_sales
    , rank_categories
    , rank_venue
    , rank_event
    , RT_month
    , RT_categories
    , RT_event
    , RT_venue
    , per_diff_categories
from RT_table
order by month, rank_categories, rank_venue, rank_event
;
    
    
    
select distinct month, catname, rank_categories, sum_group_categories
, lag(sum_group_categories) over(order by row_id)
--, sum(t_sales) over(partition by month order by rank_categories desc ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW) as RT_categories
from test
where month = 1
order by row_id;

--I NEED TO GET A ROW NUMBER THAT IS ORDERED BY RANK_CATEGORIES, RANK_VENUE, RANK_EVENT, AND MONTH
    
    
select distinct month, catid, catname, sum_group_categories, lag_cat, rank_categories, per_diff, per_diff_final
from test
order by row_id_cat
;
    
    
select count(*) from test;
    
    
    
    
eventid, venueid, catname, month, t_sales, row_id, sum_group_month, sum_group_categories, sum_group_venue 
    , rank_categories , rank_venue , rank_event, lag_month , row_id_cat, row_id_venue, RT_month 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    --
